---
title: "Visualising transport data"
subtitle: '<br/>ðŸ—º<br/>Transport Data Science'
author: "Robin Lovelace"
date: 'University of Leeds'
format: revealjs
bibliography: viz-references.bib
---

```{r setup, include = FALSE}
library(tmap)
library(spData)
library(sf)
```

## A brief history of geographic vizualisation {background-image="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Zentralbibliothek_Z%C3%BCrich_-_Ideen_zu_einer_Geographie_der_Pflanzen_nebst_einem_Naturgem%C3%A4lde_der_Tropenl%C3%A4nder_-_000012142.jpg/2560px-Zentralbibliothek_Z%C3%BCrich_-_Ideen_zu_einer_Geographie_der_Pflanzen_nebst_einem_Naturgem%C3%A4lde_der_Tropenl%C3%A4nder_-_000012142.jpg"}

- Humboldt's NaturgemÃ¤lde (1807, *Geography of Plants*)

## Good, bad, ugly, wrong

- Aim must be good graphics, but first it's important to avoid pitfalls
- Source: Free and open book [Data Visualisation](https://clauswilke.com/dataviz/introduction.html)

```{r, echo=FALSE, out.width="80%"}
knitr::include_graphics("https://clauswilke.com/dataviz/introduction_files/figure-html/ugly-bad-wrong-examples-1.png")
```

## What is data visualisation?

::: incremental
- Data visualization is part art and part science. The challenge is to get the art right without getting the science wrong and vice versa. A data visualization first and foremost has to accurately convey the data.

- In my experience, scientists frequently (though not always!) know how to visualize data without being grossly misleading. However, they may not have a well developed sense of visual aesthetics, and they may inadvertantly make visual choices that detract from their desired message. Designers, on the other hand, may prepare visualizations that look beautiful but play fast and loose with the data.
:::

Source: [Fundamentals of Data Vizualisation](https://serialmentor.com/dataviz/)

## Viz 4 policy

::: incremental
- [visualisations] are also often the best way to present the findings of [transport] research in a way that is accessible. [visualisation] making is therefore a critical part of [transport] and its emphasis not only on describing, but also changing the world.

Source: [Geocomputation with R](https://geocompr.robinlovelace.net/adv-map.html)

:::


## Illustration of policy impact

```{r, echo=FALSE}
knitr::include_graphics("https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2014/10/31/1414751968306/d83dffac-d060-4b77-88c0-77916e18e233-1020x397.png?width=620&quality=45&auto=format&fit=max&dpr=2&s=7a52a871a27b3fa6ae167244d4f9845e")
```

- Visualisations can make findings become 'real'

## A brief history of geographic data viz in R

::: incremental
"The core R engine was not designed specifically for the display and analysis
of maps, and the limited interactive facilities it offers have drawbacks in this
area" [@bivand_applied_2013].

Five years later...

"An example showing R's flexibility and evolving geographic capabilities is **leaflet**
[@R-leaflet],
a package for making interactive maps that has been extended by the R community, as we'll see in Chapter 9" 
[@lovelace_geocomputation_2018a].
:::

## Base R graphics: sf 

```{r}
plot(nz)
```

## Base R graphics: sf II

```{r, fig.cap=" ", fig.show='hold', out.width="40%"}
plot(st_geometry(nz))
plot(nz_height, add = TRUE)
sf_cols = sf.colors(n = 2, alpha = 0.2)
nz$col = factor(x = nz$Island, labels = sf_cols)
plot(st_geometry(nz), col = as.character(nz$col))
```

## sf graphics: code

```{r, eval=FALSE, echo=TRUE}
# facet plots by default
plot(nz) 
# plot just geometry, ready for new layers:
plot(st_geometry(nz), reset = FALSE)
# addition of new layers
plot(nz_height, add = TRUE)
# transparency
sf_cols = sf.colors(n = 2, alpha = 0.2)
nz$col = factor(x = nz$Island, labels = sf_cols)
plot(st_geometry(nz), col = as.character(nz$col))
#  see ?plot.sf for more
```

::: incremental
## Observations

- Facets by default: useful for seeing patterns.
- Transparency new, `add = ...` argument the same
- You can go far with base R graphics 
[@murrell_graphics_2016].
:::

## tmap

- A diverse dedicated mapping R package

```{r, eval=TRUE, message=FALSE, warning=FALSE}
#| echo: true
library(tmap)
tmap_mode("plot")
tm_shape(nz) +
  tm_polygons("Median_income", palette = "RdYlBu")
```

## Why tmap?

::: incremental
- It is powerful and flexible.
- Concise syntax, attractive maps with minimal code, familiar to **ggplot2** users.
- Unique capability: same code -> static + interactive maps with switch `tmap_mode()`.
- Wide range of spatial classes (including `raster` objects) supported.
- Well documented + developed --- see [`tmap-nutshell`](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-nutshell.html) and JSS paper
[@tennekes_tmap_2018].
:::

## tmap basics

```{r}
#| echo: true
#| label: tmap-basics
#| layout-ncol: 3
# Add fill layer#|  to nz shape
tm_shape(nz) + tm_fill() 
# Add border layer to nz shape
tm_shape(nz) + tm_borders() 
# Add fill and border layers to nz shape
tm_shape(nz) + tm_fill() + tm_borders() 
```

## Animations

- Are easy with **tmap** (section [9.3](http://geocompr.robinlovelace.net/adv-map.html#animated-maps) of geocompr)

```{r, echo=FALSE, out.width="80%"}
knitr::include_graphics("https://user-images.githubusercontent.com/1825120/38543030-5794b6f0-3c9b-11e8-9da9-10ec1f3ea726.gif")
```

## Interactive maps with mapview

```{r, eval=FALSE}
m = mapview::mapview(spData::nz)
m@map
```

![](https://i.imgur.com/hz98Jru.png)

## Web mapping applications

- Leaflet integrates with **shiny** via `leaflet::leafletOutput()`, enabling web mapping applications built on R
- These can be set-up to scale nationally, as illustrated by [pct.bike](http://www.pct.bike/)
[@lovelace_propensity_2017].

```{r, echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/npct/pct-team/master/figures/pct-frontpage.png")
```

## Summary

::: incremental
- Visualisation is an important skill in data science
- Visualisation is particularly valuable for evidence-based decision-making and policy
- Open source command software like R provides powerful tools for data visualisation
- Geographic data visualisation is possible with R using packages such as sf and tmap
- These visualisation skills will be useful in the lecture next week on project work
:::

## Exercise with desire line data in stplanr

1. Create a map showing the number of people walking and cycling in the `stplanr` dataset `flowlines_sf` using:
-base graphics (hint: use `plot()`) and
-**tmap** (hint: use `tm_shape(flowlines_sf) + ...`, `palette = "viridis"` and other options shown in `tmaptools::palette_explorer()` give different colourschemes).
    - Name two advantages of each approach
    - Bonus: Other mapping packages could be used to show the same data?
    
For more information on plotting OD data, see the [stplanr-od](https://docs.ropensci.org/stplanr/articles/stplanr-od.html) vignetted, e.g. with

```r
vignette("stplanr-od")
```

## Result: base graphics
    
```{r, echo=TRUE, out.width="70%", fig.show='hold', message=FALSE}
library(stplanr)
lwd = flowlines_sf$All / mean(flowlines_sf$All) * 3
plot(flowlines_sf["Taxi"], lwd = lwd)
```

## Bonus exercise

- Based on the `routes_fast_sf` data in the `stplanr` package, identify roads where investment in cycling is likely to be effective.

Starting point:

```{r}
nrow(flowlines_sf)
nrow(routes_fast_sf)
# routes_fast_sf = dplyr::inner_join(routes_fast_sf, flow)
routes_fast_joined = cbind(routes_fast_sf, flowlines_sf)
rnet = overline(routes_fast_joined, "Bicycle")
```

## sf results

```{r, echo=FALSE}
plot(rnet["Bicycle"], lwd = routes_fast_sf$All / 50)
```

## tmap 'view mode' results

```{r, eval=FALSE}
# tm_shape(rnet) +
#   tm_lines(col = "Bicycle", lwd = "Bicycle", scale = 9, palette = "RdYlBu")
```

![](https://user-images.githubusercontent.com/1825120/76854526-26bb5780-6847-11ea-8903-e7466a1aa750.png)
See [here](https://user-images.githubusercontent.com/1825120/76854526-26bb5780-6847-11ea-8903-e7466a1aa750.png) for result

## Exercises bonus (optional)

- Using data in the `pct` github package, estimate cycling potential in a city of your choice in the UK, and show the results

- See the [pct_training](https://itsleeds.github.io/pct/articles/pct_training.html) vignette for further information

- Work on your portfolios, adding a new visualisation

## References
