linewidth = all   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.03,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.1,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "bm", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
#| echo: true
#| output: true
desire_lines = desire_lines[order(desire_lines$Active),]
ggplot()+
geom_sf(data = desire_lines,  # Define the data frame used to make the map
aes(colour = Active,  # We want to map lines, the colour  is based on the "Active" column
alpha =  all,     # Make lines slightly transparent and based on the "all" column
linewidth = all   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.03,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.1,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "bl", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
#| echo: true
#| output: true
desire_lines = desire_lines[order(desire_lines$Active),]
ggplot()+
geom_sf(data = desire_lines,  # Define the data frame used to make the map
aes(colour = Active,  # We want to map lines, the colour  is based on the "Active" column
alpha =  all,     # Make lines slightly transparent and based on the "all" column
linewidth = all   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.03,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.1,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines,  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.03,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.1,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines,  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.001,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines%>% filter(count_change >= 5) %>% arrange(count_change),,  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.001,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.001,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.001,0.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.001,2), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "D")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "A")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "B")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "D")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.01,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
tm_shape(change_desire_lines %>%  filter(
count_change >= 5
) %>% arrange(count_change))+
tm_lines(col = "count_change",
palette = "plasma",
alpha = "count_change",
lwd = "count_change")
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 5) %>% arrange(count_change),
aes(color = count_change,
alpha =  count_change,
#lwd = count_change*5
))+
scale_color_viridis_c(option = "C")+
theme_bw()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
ggplot()+
geom_sf(data = change_desire_lines %>% filter(count_change >= 3) %>% arrange(count_change),  # Define the data frame used to make the map
aes(colour = count_change,  # We want to map lines, the colour  is based on the "Active" column
alpha =  count_change,     # Make lines slightly transparent and based on the "all" column
linewidth = count_change   # The line width is based on the "all" column
))+
scale_colour_viridis_c(option = "C")+         # Select a colour palette
scale_linewidth_binned(range = c(0.01,1.6), guide = "legend")+  # Set max and min ranges for line width
scale_alpha(range = c(0.001,1), guide = "legend")+                # Set max and min ranges for transparency
annotation_scale(location = "br", width_hint = 0.3) +  # Scale bar (bottom left)
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +  # North arrow (top left)
theme_void()
bike_trips <- bike_trips %>% mutate(date = date(start_time)) %>%
mutate(type_day = case_when(date == as.Date("2015-07-09") ~ "Strike Day",
TRUE ~ "Non-Strike Day"
))
bike_trips %>% group_by(date, type_day) %>%
summarise(count = n()) %>%
ggplot()+
geom_bar(aes(x = as.factor(date),
y = count,
fill = type_day), stat = "identity")+
theme_minimal()
bike_trips <- bike_trips %>% mutate(date = date(start_time)) %>%
mutate(type_day = case_when(date == as.Date("2015-07-09") ~ "Strike Day",
TRUE ~ "Non-Strike Day"
))
bike_trips %>%
group_by(as.character( date), type_day) %>%
summarise(count = n()) %>%
ggplot()+
geom_bar(aes(x = as.factor(date),
y = count,
fill = type_day), stat = "identity")+
theme_minimal()
bike_trips <- bike_trips %>% mutate(date = date(start_time)) %>%
mutate(type_day = case_when(date == as.Date("2015-07-09") ~ "Strike Day",
TRUE ~ "Non-Strike Day"
))
bike_trips %>%
group_by(date, type_day) %>%
summarise(count = n()) %>%
ggplot()+
geom_bar(aes(x = as.factor(date),
y = count,
fill = type_day), stat = "identity")+
theme_minimal()
library(sf)          # vector data package
library(tidyverse)   # tidyverse packages
library(ggspatial)   # ggspatial package
library(spData)  # spatial data package
reticulate::repl_python()
